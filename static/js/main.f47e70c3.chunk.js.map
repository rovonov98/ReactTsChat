{"version":3,"sources":["assets/img/upload.svg","components/MessageForm.tsx","components/MyMessage.tsx","components/NotMyMessage.tsx","components/ChatFeed.tsx","components/LoginForm.tsx","components/Chat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","type","placeholder","onChange","target","isTyping","htmlFor","src","uploadSVG","alt","multiple","id","style","display","files","MyMessage","message","attachments","file","float","maxWidth","maxHeight","marginRight","NotMyMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","width","height","backgroundRepeat","backgroundPosition","textAlign","backgroundSize","borderRadius","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","messagesContainer","useRef","current","undefined","scrollTop","scrollHeight","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","ref","keys","Object","key","lastMessageKey","renderMessages","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","fetch","headers","localStorage","setItem","window","location","reload","required","Chat","getItem","projectID","userSecret","renderChatFeed","chatAppProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f47e70c3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/upload.7f7867d2.svg\";","import { useState } from 'react'\r\nimport { sendMessage, isTyping } from 'react-chat-engine'\r\nimport '../assets/scss/MessageForm.scss'\r\nimport uploadSVG from '../assets/img/upload.svg'\r\n\r\ninterface Props {\r\n    chatId: number,\r\n    creds: object\r\n}\r\n\r\nconst MessageForm: React.FC<Props> = (props) => {\r\n    const [value, setValue] = useState<string>('')\r\n    const { chatId, creds } = props\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement> | React.FormEvent<HTMLInputElement>): void => {\r\n        event.preventDefault()\r\n        const text = value.trim()\r\n        if (text.length > 0) sendMessage(creds, chatId, { text })\r\n        setValue('')\r\n    }\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        setValue(event?.target.value)\r\n        isTyping(props, chatId)\r\n    }\r\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' })\r\n    }\r\n    return (\r\n        <form className=\"message-form\" onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                className=\"message-input\"\r\n                placeholder=\"Write your message here...\"\r\n                value={ value }\r\n                onChange={ handleChange }\r\n                onSubmit={ handleSubmit }\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\"> \r\n                <img className=\"svg-image\" src={ uploadSVG } alt=\"w\"/>\r\n                    {/* upload */}\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={ false }\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={ handleUpload }\r\n            />\r\n            <button \r\n                type=\"submit\"\r\n                className=\"submit-button\"\r\n            > Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\nexport default MessageForm","import '../assets/scss/Message.scss'\r\n\r\ninterface Props {\r\n    message: any\r\n}\r\n\r\nexport const MyMessage: React.FC<Props> = ({ message }) => {\r\n    if (message?.attachments?.length > 0) {\r\n        return (\r\n            <img \r\n                src={ message.attachments[0].file }\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ \r\n                    float: 'right',\r\n                    maxWidth: '5rem',\r\n                    maxHeight: '10rem',\r\n                }}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '1rem',   }}>\r\n            { message.text }\r\n        </div>\r\n    )\r\n}\r\nexport default MyMessage","import '../assets/scss/Message.scss'\r\n\r\ninterface Props {\r\n    message: any,\r\n    lastMessage: any\r\n}\r\n\r\nexport const NotMyMessage: React.FC<Props> = ({ message, lastMessage }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username\r\n\r\n    return (\r\n        <div className=\"message-row\" style={{ display: 'flex' }}>\r\n            { isFirstMessageByUser && (\r\n                <div \r\n                    className=\"messave-avatar\"\r\n                    style={{ \r\n                        backgroundImage: `url(${message?.sender?.avatar})`,\r\n                        width: '2rem',\r\n                        height: '2rem',\r\n                        backgroundRepeat: 'no-repeat',\r\n                        backgroundPosition: 'center center',\r\n                        textAlign: 'center',\r\n                        backgroundSize: '100%',\r\n                        borderRadius: '50%',\r\n                    }}\r\n                >\r\n                </div>\r\n            )}\r\n            {\r\n                (message?.attachments?.length > 0) \r\n                    ? (\r\n                        <img \r\n                            src={ message.attachments[0].file }\r\n                            alt=\"message-attachment\"\r\n                            className=\"message-image\"\r\n                            style={{ \r\n                                marginLeft: isFirstMessageByUser ? '.3rem' : '3rem',\r\n                                maxWidth: '5rem',\r\n                                maxHeight: '10rem',\r\n                            }}\r\n                        />\r\n                    ) \r\n                    : (\r\n                        <div\r\n                            className=\"message\" \r\n                            style={{ float: 'left', marginLeft: isFirstMessageByUser ? '.85rem' : '3rem'  }}\r\n                        >\r\n                            { message.text }\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default NotMyMessage","import { useRef } from 'react'\r\nimport MessageForm from './MessageForm'\r\nimport MyMessage from './MyMessage'\r\nimport NotMyMessage from './NotMyMessage'\r\nimport '../assets/scss/ChatFeed.scss'\r\n\r\ninterface Props {\r\n    chats?: any,\r\n    activeChat: number,\r\n    userName: string,\r\n    messages: any,\r\n    creds: object\r\n}\r\n\r\nconst ChatFeed: React.FC<Props> = (props) => {\r\n    const { chats, activeChat, userName, messages, creds } = props\r\n    const chat = chats && chats[activeChat]\r\n    const messagesContainer = useRef<HTMLDivElement>(null)\r\n    const scrollDown = () => {\r\n        if (messagesContainer.current !== null && messagesContainer.current !== undefined) {\r\n            messagesContainer.current.scrollTop = messagesContainer.current.scrollHeight\r\n        }\r\n    }\r\n    scrollDown()\r\n    const renderReadReceipts = (message: any, isMyMessage: boolean) => {\r\n        return chat.people.map((person: any, index: number) => person.last_read === message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                style={{ \r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${ person?.person?.avatar })`,\r\n                    backgroundRepeat: 'no-repeat',\r\n                    backgroundPosition: 'center center',\r\n                    textAlign: 'center',\r\n                    backgroundSize: '100%',\r\n                    width: '.8rem',\r\n                    height: '.8rem',\r\n                    borderRadius: '50%'\r\n                }}\r\n            >\r\n            </div>\r\n        ))\r\n    }\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages)\r\n        return keys.map((key, index) => {\r\n            const message = messages[key]\r\n            const lastMessageKey = index === 0 ? 0 : keys[index - 1]\r\n            const isMyMessage = userName === message.sender.username\r\n            return (\r\n                <div \r\n                    key={`msg_${ index }`} style={{ width: '100%' }}\r\n                    className=\"message-wrapper\"\r\n                >\r\n                    <div className=\"message-container\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={ message }/>\r\n                            : <NotMyMessage message={ message } lastMessage={ messages[lastMessageKey] }/>\r\n                        }\r\n                    </div>\r\n                    <div \r\n                        className=\"read-receipts\" \r\n                        style={{ \r\n                            marginRight: isMyMessage ? '1rem' : '0px', \r\n                            marginLeft: isMyMessage ? '0px' : '3rem',\r\n                        }}\r\n                    > \r\n                        {  renderReadReceipts(message, isMyMessage) }\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n    if (!chat) return (\r\n        <div>\r\n            Loading...\r\n        </div>\r\n    )\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{ chat?.title }</div>\r\n                <div className=\"chat-subtitle\">\r\n                    { chat.people.map((person: any) => `${ person.person.username }`) }\r\n                </div>\r\n            </div>\r\n            <div className=\"messages-wrapper\" ref={ messagesContainer }>\r\n                { renderMessages() }\r\n            </div>\r\n            <div className=\"message-form-wrapper\">\r\n                <MessageForm { ...props } chatId={ activeChat } creds={ creds }/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ChatFeed","import { useState } from 'react'\r\n\r\nconst LoginForm: React.FC = () => {\r\n    const [username, setUsername] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        const authObject = {\r\n            'Project-ID': 'faefd3ca-b618-4bb4-bea6-67fddd729d63',\r\n            'User-Name': username,\r\n            'User-Secret': password\r\n        }\r\n        try {\r\n            await fetch('https://api.chatengine.io/chats', {\r\n                headers: authObject\r\n            })\r\n            localStorage.setItem('username', username)\r\n            localStorage.setItem('password', password)\r\n            window.location.reload()\r\n        }\r\n        catch (error) {\r\n            setError('Incorrect credentials')\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>Login Form</h1>\r\n                <form onSubmit={ handleSubmit }>\r\n                    <input \r\n                        value={ username } \r\n                        type=\"text\" \r\n                        onChange={ (e) => setUsername(e.target.value) }\r\n                        placeholder=\"username\"\r\n                        required\r\n                    />\r\n                    <input \r\n                        value={ password }\r\n                        type=\"password\"\r\n                        onChange={ (e) => setPassword(e.target.value) }\r\n                        placeholder=\"password\"\r\n                        required\r\n                    />\r\n                    <div>\r\n                        <button type=\"submit\">Submit</button>\r\n                    </div>\r\n                    <h3>{ error }</h3>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import { ChatEngine } from 'react-chat-engine'\r\nimport ChatFeed from './ChatFeed'\r\nimport LoginForm from './LoginForm'\r\n\r\nconst Chat: React.FC = () => {\r\n    if (!localStorage.getItem('username')) \r\n        return <LoginForm />\r\n    return (\r\n        \r\n        <div>\r\n            <ChatEngine \r\n                height=\"100vh\"\r\n                projectID=\"faefd3ca-b618-4bb4-bea6-67fddd729d63\"\r\n                userName={ localStorage.getItem('username') }\r\n                userSecret={ localStorage.getItem('password') }\r\n                renderChatFeed={ (chatAppProps: any) => <ChatFeed { ...chatAppProps }/> } \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","import React from 'react'\nimport Chat from './components/Chat'\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            <Chat />\n        </div>\n    )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}